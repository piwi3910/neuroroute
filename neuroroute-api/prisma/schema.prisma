generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ApiKey {
  id          String    @id @default(uuid())
  key         String    @unique
  name        String
  description String?
  enabled     Boolean   @default(true)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  expiresAt   DateTime? @map("expires_at")
  permissions String[]
  rateLimit   Int?      @map("rate_limit")
  usageCount  Int       @default(0) @map("usage_count")
  lastUsedAt  DateTime? @map("last_used_at")

  @@map("api_keys")
}

model Setting {
  id        String   @id
  value     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("settings")
}

model ModelConfig {
  id           String   @id
  name         String
  provider     String
  enabled      Boolean  @default(true)
  priority     Int      @default(0)
  capabilities String[]
  config       Json
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("model_configs")
}

model RequestLog {
  id             String   @id @default(uuid())
  requestId      String   @map("request_id")
  prompt         String
  modelUsed      String   @map("model_used")
  promptTokens   Int      @map("prompt_tokens")
  responseTokens Int      @map("response_tokens")
  totalTokens    Int      @map("total_tokens")
  processingTime Float    @map("processing_time")
  createdAt      DateTime @default(now()) @map("created_at")

  @@map("request_logs")
}

model User {
  id              String           @id @default(uuid())
  username        String           @unique
  email           String           @unique
  passwordHash    String           @map("password_hash")
  passwordSalt    String           @map("password_salt")
  enabled         Boolean          @default(true)
  lastLoginAt     DateTime?        @map("last_login_at")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  userPermissions UserPermission[]
  userRoles       UserRole[]

  @@map("users")
}

model Role {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  userRoles   UserRole[]

  @@map("roles")
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  roleId    String   @map("role_id")
  createdAt DateTime @default(now()) @map("created_at")
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Permission {
  id              String           @id @default(uuid())
  name            String           @unique
  description     String?
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  userPermissions UserPermission[]

  @@map("permissions")
}

model UserPermission {
  id           String     @id @default(uuid())
  userId       String     @map("user_id")
  permissionId String     @map("permission_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
  @@map("user_permissions")
}

model Config {
  key       String   @id
  value     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("configs")
}

model ModelUsage {
  id             String   @id @default(uuid())
  modelId        String   @map("model_id")
  provider       String
  promptTokens   Int      @map("prompt_tokens")
  outputTokens   Int      @map("output_tokens")
  totalTokens    Int      @map("total_tokens")
  processingTime Float    @map("processing_time")
  userId         String?  @map("user_id")
  apiKeyId       String?  @map("api_key_id")
  requestId      String?  @map("request_id")
  timestamp      DateTime @default(now())
  cost           Float    @default(0)

  @@map("model_usage")
}
